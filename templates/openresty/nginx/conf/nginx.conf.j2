# {{ ansible_managed }}
#
# FILE:             /usr/local/openresty/nginx/conf/nginx.conf

## Recommended reading list:
# - https://www.nginx.com/blog/tuning-nginx/

user  {{ alb_nginx_user }};
worker_processes  auto;

# error_log  {{ alb_logs_path }}/error.log;
error_log  {{ alb_logs_path }}/error.log warn;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        {{ alb_openresty_pidfile }};

{{ alb_nginx_maincontext_custom }}

events {
    worker_connections  1024;
{{ alb_nginx_eventscontext_custom }}
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    charset utf-8;

    more_clear_headers Server;
    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_iso8601] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # error_page  404              /404.html;
    # error_page   500 502 503 504  /50x.html;

    access_log  {{ alb_logs_path }}/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

{% if (alb_openresty_http_lua_code_cache_disabled|bool) %}
    lua_code_cache off;
{% endif %}

    # The "auto_ssl" shared dict should be defined with enough storage space to
    # hold your certificate data. 1MB of storage holds certificates for
    # approximately 100 separate domains.
    lua_shared_dict auto_ssl 10m;
    # The "auto_ssl_settings" shared dict is used to temporarily store various settings
    # like the secret used by the hook server on port 8999. Do not change or
    # omit it.
    lua_shared_dict auto_ssl_settings 64k;

    # A DNS resolver must be defined for OCSP stapling to function.
    #
    # This example uses Google's DNS server. You may want to use your system's
    # default DNS servers, which can be found in /etc/resolv.conf. If your network
    # is not IPv6 compatible, you may wish to disable IPv6 results by using the
    # "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
    resolver 8.8.8.8;

    # Initial setup tasks.
    init_by_lua_block {
      auto_ssl = (require "resty.auto-ssl").new()

{% if (alb_use_consul|bool) %}
      auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.consul")
{% endif %}

{% if alb_letsencrypt_acmeurl_custom is defined %}
      auto_ssl:set("ca", "{{ alb_letsencrypt_acmeurl_custom }}")
{% endif %}

      -- Define a function to determine which SNI domains to automatically handle
      -- and register new certificates for. Defaults to not allowing any domains,
      -- so this must be configured.
      auto_ssl:set("allow_domain", function(domain)

        ngx.log(ngx.WARN, "allow_domain will try domain:", domain)

        -- Fail first if domain seems to be an IP.
        -- @see https://github.com/GUI/lua-resty-auto-ssl/issues/26#issuecomment-366919522
        if string.match(domain, "(%d+).(%d+).(%d+).(%d+)") or string.find(domain, ":", 1, true) then
            -- These domains can be used for testing. Comment out this if to not allow even these ones
            -- https://nip.io/
            -- https://xip.io/
            -- https://sslip.io/
            if not (string.find(domain, "nip.io", 1, true) or string.find(domain, "xip.io", 1, true) or string.find(domain, "sslip.io", 1, true)) then
                ngx.log(ngx.ERR, "allow_domain do not allow HTTPS for IPs ", domain)
                return false
            end
        end

{{ alb_letsencrypt_allow_domain_customlua|default('') }}

        ngx.log(ngx.NOTICE, "allow_domain default {{ alb_letsencrypt_default|default('return true') }} to ", domain)
        {{ alb_letsencrypt_default|default('return true') }}
      end)

      auto_ssl:init()
    }

    init_worker_by_lua_block {
      auto_ssl:init_worker()
    }

    # HTTPS server
    server {
      # listen 443 ssl;
      listen {{ alb_openresty_ip }}:{{ alb_openresty_httpsport }} ssl;

      # Dynamic handler for issuing or returning certs for SNI domains.
      ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate()
      }

      # You must still define a static ssl_certificate file for nginx to start.
      #
      # You may generate a self-signed fallback with:
      #
      # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
      #   -subj '/CN=sni-support-required-for-valid-ssl' \
      #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
      #   -out /etc/ssl/resty-auto-ssl-fallback.crt
      ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
      ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    }

    # HTTP server
    server {
      # listen 80;
      listen {{ alb_openresty_ip }}:{{ alb_openresty_httpport }};

      # Endpoint used for performing domain verification with Let's Encrypt.
      location /.well-known/acme-challenge/ {

        error_log  /var/log/alb/letsencrypt.log;
        access_log  /var/log/alb/letsencrypt.log  main;

        content_by_lua_block {
          auto_ssl:challenge_server()
        }
      }
    }

    # Internal server running on port 8999 for handling certificate tasks.
    server {
      listen 127.0.0.1:8999;

      # Increase the body buffer size, to ensure the internal POSTs can always
      # parse the full POST contents into memory.
      client_body_buffer_size 128k;
      client_max_body_size 128k;

      location / {
        content_by_lua_block {
          auto_ssl:hook_server()
        }
      }
    }

    server {
        # listen 443 ssl default_server;
        listen {{ alb_openresty_httpsport }} ssl default_server;
        server_name  _;

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        # TODO: reorganize path of folders to nginx.conf be on the same folder of alb,
        #       them move strategies to subpath (like what is done with templates/nlb)
        #       (fititnt, 2019-11-23 18:23 BRT)
        #{  % filter indent(width=4) %  }{  % include "../../../alb-strategy/partials/add_headers.conf.j2" %  }{  % endfilter %  }

        # Dynamic handler for issuing or returning certs for SNI domains.
        ssl_certificate_by_lua_block {
          auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

{% if alb_openresty_stub_status|bool %}
        # TODO: do better ACL here since HAProxy is also 127.0.0.1 (fititnt, 2019-11-26 19:56 BRT)
        # https://www.keycdn.com/support/nginx-status
        location {{ alb_openresty_stub_status_location }} {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
{% endif %}

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # Next block force HTTPS redirection for domains without more specific rule
    #server {
    #    #listen 80 default_server;
    #    listen {{ alb_openresty_ip}}:{{ alb_openresty_httpport }} default_server;
    #
    #    server_name _;
    #
    #    return 301 https://$host$request_uri;
    #}

    # include "/usr/local/openresty/nginx/conf/sites-enabled/*.conf";
    include "/opt/alb/apps/*.conf";

    {{ alb_nginx_httpcontext_custom }}
}
