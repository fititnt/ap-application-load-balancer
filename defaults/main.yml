---
# FILE: {{ role_path }}/defaults/main.yml

alb_name: "AP Application Load Balancer"
alb_hide_alb: yes           # This and 'alb_forcedebug: no' means try to hide even references to NGinx/OpenResty
alb_name_service: "alb"     # If alb_hide_alb: no, thiw will replace nginx / openresty strings on some places
alb_name_datacenter: "dc1"  # Datacenter identifier of a group of active nodes
alb_expose_version: no      # If alb_hide_alb: no, this will be displayed like "alb/1.2.3".
alb_forcedebug: no
alb_forceredeploy: no # Ignore already made changes base on facts from /etc/ansible/fact.d/alb*.fact

### AP-ALB Components overview _________________________________________________
# The defaults of v0.7.4+ will use: Apps, HAProxy, Logrotate, OpenResty
# You can enable/disable components. Or explicity enforce on your configuration
alb_manange_all: yes
alb_manange_haproxy: yes
alb_manange_openresty: yes
alb_manange_ufw: no

alb_use_consul: no

## Optionated (but NOT required) group of tasks.
alb_manange_common: no  # hostname, timezone (UTC) [See tasks/common/common.yml]

## Sanity Check run at very beginning
alb_manange_sanitycheck: yes

## Note: the next options is better leave it alone
alb_manange_apps: "{{ alb_manange_openresty }}"
alb_manange_sysapps: "{{ alb_manange_apps }}"
alb_manange_logrotate: "{{ alb_manange_openresty or alb_manange_apps }}"

### AP-ALB Components: shared options __________________________________________
# Some variables are used on more than one ALB component by default for avoiding
# some repetitive work (...) 

alb_auth_users: []
# alb_auth_users:
#   - username: Admin1
#     password: "plain-password"
#   - username: Admin2
#     password: "plain-password2"
#   - username: SuperUser2
#     password: !vault |
#       $ANSIBLE_VAULT;1.1;AES256
#       62313365396662343061393464336163383764373764613633653634306231386433626436623361
#       6134333665353966363534333632666535333761666131620a663537646436643839616531643561
#       63396265333966386166373632626539326166353965363262633030333630313338646335303630
#       3438626666666137650a353638643435666633633964366338633066623234616432373231333331
#       6564

## @see https://en.wikipedia.org/wiki/DMZ_(computing)
## ALB/UFW will use alb_dmz to make all traffic FROM/TO to this machine free
#
alb_dmz: []
# alb_dmz:
#  - ip: 203.0.113.1
#    name: my_apps_server
#  - ip: 203.0.113.2
#    name: my_db_server
#  - ip: 203.0.113.3
#    name: any_other_server_inside_the_network

# @see https://en.wikipedia.org/wiki/Bastion_host
# ALB/UFW will use alb_bastion_hosts to make all traffic FROM/TO to this machine free
# This behavior could change on future to make it more configurable
#
alb_bastion_hosts: []
# alb_bastion_hosts:
#  - ip: 192.0.2.255
#    name: "My Bastion Host"

# @see https://en.wikipedia.org/wiki/Jump_server
# ALB/UFW will use alb_jump_boxes to make all traffic FROM/TO to this machine free
# This behavior could change on future to make it more configurable
#
alb_jump_boxes: []
# alb_jump_boxes:
#  - ip: 192.0.2.10
#    name: "my jumpbox server"

## @see https://github.com/fititnt/ap-application-load-balancer/issues/26
alb_acme_production: true
alb_acme_rule_whitelist:
alb_acme_rule_whitelist_file: '' # not implemented... yet
alb_acme_rule_blacklist: []
alb_acme_rule_blacklist_file: '' # not implemented... yet
alb_acme_rule_ips_allowed: false # ACME (Let's Encript at least) will HTTPS for IPs, so don't even try
alb_acme_rule_last: true

# This value is infered from alb_acme_production. But you can customize yourself
alb_acme_url: "{{ 'https://acme-v02.api.letsencrypt.org/directory' if alb_acme_production else 'https://acme-staging-v02.api.letsencrypt.org/directory' }}"

### AP-ALB Component: Sysapps __________________________________________________

alb_sysapps__app_auth_basic: "Internal Access Area"
alb_sysapps__app_auth_basic_user_file: "/opt/alb/sysapps/.htaccess"
alb_sysapps__app_auth_basic_enabled: true

### AP-ALB Component: Apps _____________________________________________________

alb_apps: []

alb_apps__app_auth_basic_enabled: false
alb_apps__app_auth_basic: "Private {{ item.app_uid }} Area"
alb_apps__app_auth_basic_user_file: "/opt/alb/apps/{{ item.app_uid }}.htpasswd"

alb_letsencrypt_allow_domain_whitelist:
#  - example.org
#  - example.com

alb_letsencrypt_allow_domain_blacklist:
#  - baddomain.com
#  - oldexpireddomain.com

alb_letsencrypt_allow_domain_customlua: |
  -- FILE: /usr/local/openresty/nginx/conf/nginx.conf
  -- NGINX CONTEXT: http/init_by_lua_block/auto_ssl:set("allow_domain", function(domain)
  -- See https://github.com/GUI/lua-resty-auto-ssl
  -- Note: Inside lua blocks (like this one) "--" is used for start comments
  --       and not "#"

alb_letsencrypt_default: "return true" # the default (last) LUA code if a domain should or not checket for Let's Encrypt Keys. Use "return false" to disable
# alb_letsencrypt_default: "return false"
#alb_letsencrypt_allow_domain_default: "return true"
## alb_letsencrypt_default: "return false"

# alb_apps_serverblock_template is deprecated
alb_apps_serverblock_template: '{{ role_path }}/templates/openresty/nginx/conf/vhosts/static-site.conf.j2'

# Note: at this moment, only "file" implemented. But later "syslog" could be one option
alb_logs_method: "file"

alb_logs_path: "/var/log/alb"


### AP-ALB Component: OpenResty ________________________________________________
alb_nginxconf_template: "{{ role_path }}/templates/openresty/nginx/conf/nginx.conf.j2"

# If you use "{{ role_path }}/templates/openresty/nginx/conf/nginx.conf.j2"
# and not a very customized nginx.conf, you can customize with these variables

alb_nginx_user: "www-data"

# See {{ role_path }}/templates/openresty/nginx/conf/nginx.conf.j2
alb_nginx_maincontext_custom: |
  # FILE: /usr/local/openresty/nginx/conf/nginx.conf
  # NGINX CONTEXT: main (global)
  # Change-me with variable alb_nginx

alb_nginx_eventscontext_custom: |
  # FILE: /usr/local/openresty/nginx/conf/nginx.conf
  # NGINX CONTEXT: events
  # Change-me with variable alb_nginx_eventscontext_custom

alb_nginx_httpcontext_custom: |
  # FILE: /usr/local/openresty/nginx/conf/nginx.conf
  # NGINX CONTEXT: http
  # Change-me with variable alb_nginx_httpcontext_custom

## OpenResty, internals --------------------------------------------------------
# @TODO note to self, consider moving these defaults as template partials
#       instead of variables to be used on YAML, but allow user change the
#       paths of the files. This maybe be more intuitive
#       (fititnt, 2019-11-19 07:43 BRT)

# If you are creating custom ALB Rules (e.g. OpenResty Server Blocks) you will
# need to consider these rules.

alb_openresty_http_lua_code_cache_disabled: false

## Uncoment next line to use acme staging (for test Let's Encrypt)
# See https://letsencrypt.org/docs/staging-environment/
# alb_letsencrypt_acmeurl_custom: "https://acme-staging-v02.api.letsencrypt.org/directory"

alb_apprule_automatichttps_httpsblock: |
  ## Automatic HTTPS / 443 port (DO NOT REMOVE) - Start
  # Fallback certificate
  ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
  ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

  # Real certificate
  ssl_certificate_by_lua_block {
    auto_ssl:ssl_certificate()
  }

  #  Let's Encrypt acme-challenge
  location /.well-known/acme-challenge/ {
    content_by_lua_block {
      auto_ssl:challenge_server()
    }
  }
  ## Automatic HTTPS / 443 port (DO NOT REMOVE) - Start

alb_apprule_automatichttp_httpsblock: |
  ## Automatic HTTPS / :80 port (DO NOT REMOVE) - Start
  #  Let's Encrypt acme-challenge
  location /.well-known/acme-challenge/ {
    content_by_lua_block {
      auto_ssl:challenge_server()
    }
  }
  ## Automatic HTTPS / :80 port (DO NOT REMOVE) - Start

### AP-ALB Component: Common ___________________________________________________
# No variables for ALB Component Common

### AP-ALB Component: HAProxy __________________________________________________
# vim /etc/haproxy/haproxy.cfg
alb_haproxy_ip: "*"
alb_haproxy_httpport: 80
alb_haproxy_httpsport: 443
alb_haproxy_haproxy_template: "{{ role_path }}/templates/nlb/haproxy-standard.cfg.j2"
# alb_haproxy_haproxy_template: "{{ role_path }}/templates/nlb-strategy/haproxy-minimal.cfg.j2"
# Check alb_openresty_httpport. HAProxy also consider this variable
# Check alb_openresty_httpsport. HAProxy also consider this variable

nlb_defaults_timeout_connect: 5000
nlb_defaults_timeout_client: 5000
nlb_defaults_timeout_server: 5000

nlb_raw_top: |
    # Customize variable nlb_raw_end to add at the top of /etc/haproxy/haproxy.cfg

## If variable nlb_raw_global is defined it will REPLACE the global at /etc/haproxy/haproxy.cfg
# nlb_raw_global:

## If variable nlb_raw_defaults is defined it will REPLACE the default at /etc/haproxy/haproxy.cfg
# nlb_raw_defaults:

nlb_raw_bottom: |
    # Customize variable nlb_raw_end to add at the bottom of /etc/haproxy/haproxy.cfg


# AP-ALB Component: HAProxy | HAProxy Stats ------------------------------------
alb_haproxy_stats_enabled: no
alb_haproxy_stats_ip: 0.0.0.0 # 0.0.0.0 means exposed for everyone. Use firewall!
alb_haproxy_stats_port: 8404
alb_haproxy_stats_uri: "/haproxy?stats"
alb_haproxy_stats_realm: "{{ alb_name }}: {{ inventory_hostname }}"
alb_haproxy_stats_trusted_hosts_only: true # true means not even ask credential from untrusted hosts
alb_haproxy_stats_trusted_hosts_skip_auth_check: false # To be implemented (fititnt, 2019-11-23 11:36 BRT)

# @TODO implement way to allow only ask auth in HAProxy Stats if from untrusted hosts (fititnt, 2019-11-23 11:42 BRT)

### AP-ALB Component: Logrotate ________________________________________________
alb_logrotate_template_alb: "{{ role_path }}/templates/logrotate/alb.j2"
alb_logrotate_template_alb_apps: "{{ role_path }}/templates/logrotate/alb_apps.j2"
alb_logrotate_template_alb_sysapps: "{{ role_path }}/templates/logrotate/alb_sysapps.j2"

### AP-ALB Component: OpenResty ________________________________________________
alb_openresty_ip: 127.0.0.1    # Use 0.0.0.0 if want OpenResty exposed (e.g. without HAproxy)
alb_openresty_httpport: 8080   # Use 80 if want OpenResty exposed (e.g. without HAproxy)
alb_openresty_httpsport: 4443  # Use 443 if want OpenResty exposed (e.g. without HAproxy)

alb_openresty_pidfile: "/usr/local/openresty/nginx/logs/nginx.pid"

### AP-ALB Component: UFW  _____________________________________________________
alb_ssh_port: 22

## Examples of variables to use with ALB/UFW, start ----------------------------
# Is possible to configure other values from ALB/UFW, but there are most common

# You very likely want to setup the alb_ufw_rules. This example allows HTTP port
# and HTTPS outside alb_dmz/alb_bastion_hosts/alb_jump_boxes
#
#    alb_ufw_rules:
#      - rule: limit
#        port: 80
#        proto: tcp
#        comment: "HTTP"
#      - rule: allow
#        port: 443
#        proto: tcp
#        comment: "HTTPS"

# This rule will be forced, and the user will have to overide this default to
# not allow make SSH port on limit
alb_ufw_rules_always:
  - rule: limit
    port: "{{ alb_ssh_port }}"
    proto: tcp
    comment: "SSH port not closed by default (Override with alb_ufw_rule_always)"

## Recommended variables to use, end -------------------------------------------

alb_ufw_clusterfuck_ignore:
#  - "alb_ufw_rule_always"

alb_ufw_canreset: yes
alb_ufw_reset: no

alb_ufw_commentprefix: "[ALB/UFW] "

alb_ufw_policy__default:
  - direction: incoming
    policy: deny
  - direction: outgoing
    policy: allow

alb_ufw_state__default: enabled

alb_ufw_rule__default: "allow" # allow, deny, limit, reject
alb_ufw_to_ip__default: "any" # allow, deny, limit, reject

alb_ufw_autoapply_dmz: yes           # no: ALB/UFW ignore alb_dmz: []
alb_ufw_autoapply_bastion_hosts: yes # no: ALB/UFW ignore alb_bastion_hosts: []
alb_ufw_autoapply_jump_boxes: yes    # no: ALB/UFW ignore alb_jump_boxes: []

#### ======================================================================= ###
# TODO: move these variables to other places of this file (fititnt, 2019-11-19 07:46)

## Internal use / Placeholder tags _____________________________________________

alb_forceignore_haproxy: false
alb_forceignore_openresty: false
alb_forceignore_ufw: false

alb_vars_saveondisk: yes


