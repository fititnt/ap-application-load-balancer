---
# FILE:            {{ role_path }}/vars/main.yml
# LICENSE:         Public Domain
# DESCRIPTION:     This file {{ role_path }}/vars/main.yml always is loaded.

alb_version: "v0.8.7-beta"
alb_version_lastrun: -1

# TODO: consider implement features using https://dnsjson.com/ (fititnt, 2019-12-31 05:24 BRT)

# This variable name may change soon. See MVP of AP-ALB inside docker containers https://github.com/fititnt/ap-application-load-balancer/issues/43
alb_internal_node_isconteiner: "{{ alb_node_isconteiner | default(false) }}"

### ALB Internal Variables: Mixed usage ________________________________________

# alb_trusted_ips: "{% set myList = [1,5,3,4,2] %}"
# alb_trusted_ips: "{{ alb_dmz | default([]) + alb_bastion_hosts | default([]) + alb_jump_boxes | default([])}}"
alb_trusted_hosts: "{{ alb_dmz + alb_bastion_hosts }}"
alb_trusted_hosts_ips: "{{ alb_trusted_hosts | map(attribute='ip') | list }}"

alb_openresty_x_served_by_enabled: yes
alb_openresty_stub_status: "{{ alb_forcedebug }}"
alb_openresty_stub_status_location: "/openresty_status"

# alb_internal_apps: "{{ (alb_apps_always | default([])) + (alb_apps | default([])) }}"
alb_internal_apps: "{{
                      ((alb_apps_always is defined and alb_apps_always[0] is defined) | ternary(alb_apps_always, []))
                      + ((alb_apps is defined and alb_apps[0] is defined) | ternary(alb_apps, []))
                    }}"
# alb_internal_sysapps: "{{ (alb_sysapps_always | default([])) + (alb_sysapps | default([])) }}"
# alb_internal_sysapps: "{{ ((alb_sysapps_always | default([])) + (alb_sysapps | default([]))) }}"
alb_internal_sysapps: "{{
                        ((alb_sysapps_alb is defined and alb_sysapps_alb[0] is defined) | ternary(alb_sysapps_alb, []))
                        + ((alb_sysapps_always is defined and alb_sysapps_always[0] is defined) | ternary(alb_sysapps_always, []))
                        + ((alb_sysapps is defined and alb_sysapps[0] is defined) | ternary(alb_sysapps, []))
                      }}"
# Note about alb_sysapps_alb: if the alb_sysapps_alb_file variables exist, and
# pont to {{ role_path }}/vars/apps/alb-opinionated-sysapps.yml, your values
# will be ignored.

alb_internal_sysapps_domain: "{{ alb_sysapps_domain | default(ansible_host) }}"
alb_internal_sysapps_domain_haproxy_stats: "{{ alb_sysapps_domain_haproxy_stats | default('haproxy.' + alb_internal_sysapps_domain) }}"
alb_internal_sysapps_domain_consul_ui: "{{ alb_sysapps_domain_consul_ui | default('consul.' + alb_internal_sysapps_domain) }}"

alb_internal_sysapps_grafana_enabled: "{{ alb_node_grafana_enabled | default(false) }}"
alb_internal_sysapps_grafana_domain: "{{ alb_node_grafana_domain | default('grafana.' + alb_internal_sysapps_domain) }}"
alb_internal_sysapps_grafana_ip: "{{ alb_node_grafana_ip | default('127.0.0.1') }}"
alb_internal_sysapps_grafana_port: "{{ alb_node_grafana_port | default('3000') }}"

alb_internal_sysapps_prometheus_enabled: "{{ alb_node_prometheus_enabled | default(false) }}"
alb_internal_sysapps_prometheus_domain: "{{ alb_node_prometheus_domain | default('prometheus.' + alb_internal_sysapps_domain) }}"
alb_internal_sysapps_prometheus_ip: "{{ alb_node_prometheus_ip | default('127.0.0.1') }}"
alb_internal_sysapps_prometheus_port: "{{ alb_node_prometheus_port | default('9090') }}"

### AP-ALB Control Node ________________________________________________________
alb_internal_constrolnode_enabled: "{{ alb_constrolnode_enabled | default(false) }}"
alb_internal_constrolnode_workspace: "{{ alb_constrolnode_workspace | default('/var/opt/alb-controlnode-default') }}"

### AP-ALB ACME ________________________________________________________________
alb_internal_acme_rule_whitelist: "{{ alb_acme_rule_whitelist }}"
alb_internal_acme_rule_blacklist: "{{ alb_acme_rule_blacklist }}"

# TODO: intead of allow user explicitly give this value, deduce from alb_acme_rule_whitelist values starting with "."
#       e.g ".example.com" from alb_acme_rule_whitelist would not be on alb_internal_acme_rule_whitelist
#       but on alb_internal_acme_rule_whitelist_suffix. Same otimizations for blacklist
#       (fititnt, 2019-12-23 22:47 BRT)
alb_internal_acme_rule_whitelist_suffix: "{{ alb_acme_rule_whitelist_suffix | default([]) }}"
alb_internal_acme_rule_whitelist_prefix: "{{ alb_acme_rule_whitelist_prefix | default([]) }}"
alb_internal_acme_rule_blacklist_suffix: "{{ alb_acme_rule_blacklist_suffix | default([]) }}"
alb_internal_acme_rule_blacklist_prefix: "{{ alb_acme_rule_blacklist_prefix | default([]) }}"

### AP-ALB Node storage ________________________________________________________
alb_internal_node_storage_driver: "{{ alb_node_storage_driver | default('file')}}"

## AP-ALB Node storage: 'file' -------------------------------------------------
alb_internal_node_storage_file_luarestautosl_dir: "{{ (alb_node_storage_driver == 'file') | ternary(alb_node_storage_file_luarestautosl_dir, false) }}"

## AP-ALB Node storage: 'consul' -----------------------------------------------
alb_internal_node_consul_prefix: "{{ alb_node_storage_consul_prefix }}"
alb_internal_node_consul_host: "{{ alb_node_storage_consul_host }}"
alb_internal_node_storage_consul_connect_timeout: "{{ alb_node_storage_consul_connect_timeout }}"
alb_internal_node_storage_consul_read_timeout: "{{ alb_node_storage_consul_read_timeout }}"
alb_internal_node_storage_consul_ssl: "{{ alb_node_storage_consul_ssl | ternary('true', 'false') }}" # RAW "true"/ "false" string here
alb_internal_node_storage_ssl_verify: "{{ alb_node_storage_consul_ssl_verify | ternary('true', 'false') }}" # RAW "true"/ "false" string here

## AP-ALB Node storage: 'custom' -----------------------------------------------
alb_internal_node_storage_custom_luarestautossl: "{{ alb_node_storage_custom_luarestautossl }}"

### AP-ALB Instrumentation ________________________________________________________
alb_internal_instrumentation_prefix_global: "{{ alb_instrumentation_prefix_global | default('') }}"
alb_internal_instrumentation_healthcheck_token: "{{ (alb_instrumentation_healthcheck_token is defined and alb_instrumentation_healthcheck_token) | ternary('/' + (alb_instrumentation_healthcheck_token | default('')) + '/', '') }}"
# alb_instrumentation_healthcheck_token: MySemiSecretToAllowRemoteChecking
alb_internal_healthcheck_prefix: "{{ alb_internal_instrumentation_prefix_global }}health-check{{ alb_internal_instrumentation_healthcheck_token }}"
# If user define a alb_healthcheck_token, we wil not enforce IPs
# alb_internal_healthcheck_public: "{{ (alb_instrumentation_healthcheck_token is defined and alb_healthcheck_token) | bool }}"

alb_internal_instrumentation_logging_access: "{{ alb_instrumentation_logging_access is defined | ternary(alb_instrumentation_logging_access | bool, false) }}"
alb_internal_instrumentation_logging_errors: "{{ alb_instrumentation_logging_access is defined | ternary(alb_instrumentation_logging_access | bool, true) }}"

### ALB Internal Variables: Component HAProxy __________________________________

# This variable is used to calculate if we really can enable HAProxy Stats on this host
alb_haproxy_stats_safetoenable: "{{ alb_haproxy_stats_enabled is defined and alb_haproxy_stats_enabled is sameas true }}"
alb_haproxy_stats_authcredentials: "{{ alb_auth_users }}"
alb_haproxy_stats_realm_escaped: "{{ alb_haproxy_stats_realm | regex_replace(' ', '\\ ') }}" # HAproxy requires escape " " with "\ "
# alb_haproxy_stats_realm: "{{ alb_haproxy_stats_realm | regex_replace(' ', '\\\\_') }}" # HAproxy requires escape " " with "\ "
# alb_haproxy_stats_realm: "{{ alb_haproxy_stats_realm.split(' ').join('\ ') }}" # HAproxy requires escape " " with "\ "
# alb_haproxy_stats_realm: "{{ alb_haproxy_stats_realm | split(' ') | join('\ ') }}" # HAproxy requires escape " " with "\ "


nlb_listen_all: "{{ }}"

nlb_listen_openresty_safetoenable: yes
nlb_listen_redis_safetoenable: no
nlb_listen_http_safetoenable: yes

## https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration/
nlb_redis:
  frontend:
    name: "frontend_redis"
    bind:
      - 127.0.0.1:6380 name redis
    default_backend: "backend_redis"
  backend:
    name: "backend_redis"
    auth: "{{ redis_password | default('')}}"
    option: "tcp-check"
    timeout_client: 120s
    timeout_server: 120s
    # TODO: change server to more flexible values (fititnt, 2019-11-25 13:06 BRT)
    server:
      - delta 173.249.10.99:6379 check inter 5s
      - echo 167.86.127.220:6379 check inter 5s
      - foxtrot 167.86.127.225:6379 check inter 5s

nlb_http:
  frontend:
    name: "frontend_http"
    bind:
      - "*:80"
    default_backend: "backend_http"
  backend:
    name: "backend_http"
    mode: "tcp"
    balance: "roundrobin"
    server:
      - "{{ inventory_hostname_short }} {{ alb_openresty_ip }}:{{ alb_openresty_httpport }} check inter 5s"
      #- delta 173.249.10.99:8080 check inter 5s
      #- echo 167.86.127.220:8080 check inter 5s
      #- foxtrot 167.86.127.225:8080 check inter 5s

### ALB Internal Variables: Facts ______________________________________________

# This result will be stored at /etc/ansible/facts.d/alb_apps.fact
alb_apps_facts:
  alb_apps: "{{ alb_internal_apps | default(None) }}"

# This result will be stored at /etc/ansible/facts.d/alb_sysapps.fact
alb_sysapps_facts:
  alb_apps: "{{ alb_internal_sysapps | default(None) }}"

alb_openresty_facts:
  ip: "{{ alb_openresty_ip }}"
  httpport: "{{ alb_openresty_httpport }}"
  httpsport: "{{ alb_openresty_httpsport }}"
  haproxy_ip: "{{ alb_haproxy_ip }}"
  haproxy_httpport: "{{ alb_haproxy_httpport }}"
  haproxy_httpsport: "{{ alb_haproxy_httpsport }}"

# This result will be stored at /etc/ansible/facts.d/alb_ufw.fact
#alb_common_facts:
#  common_tasks:
#    - "install aptitude"
#    - "hostnamectl set-hostname inventory_hostname_short"
#    - "timedatectl set-timezone UTC"
#    - "mkdir -p /etc/ansible/facts.d/"

alb_haproxy_facts:
  ip: "{{ alb_haproxy_ip }}"
  httpport: "{{ alb_haproxy_httpport }}"
  httpsport: "{{ alb_haproxy_httpsport }}"
  stats_enabled: "{{ alb_haproxy_stats_enabled }}"
  stats_safetoenable: "{{ alb_haproxy_stats_safetoenable }}"
  stats_trusted_hosts_only: "{{ alb_haproxy_stats_trusted_hosts_only }}"
  stats_trusted_hosts_skip_auth_check: "{{ alb_haproxy_stats_trusted_hosts_skip_auth_check }}" # To be implemented (fititnt, 2019-11-23 11:36 BRT)
  stats_ip: "{{ alb_haproxy_stats_ip }}"
  stats_port: "{{ alb_haproxy_stats_port }}"
  stats_uri: "{{ alb_haproxy_stats_uri }}"
  stats_realm: "{{ alb_haproxy_stats_realm }}"
  trusted_hosts_ips: "{{ alb_trusted_hosts_ips }}"
  openresty_ip: "{{ alb_openresty_ip }}"
  openresty_httpport: "{{ alb_openresty_httpport }}"
  openresty_httpsport: "{{ alb_openresty_httpsport }}"
  compatibility_veryoldversion: "{{ alb_internal_haproxy_compatibility_veryoldversion | default('undefined') }}"

# This result will be stored at /etc/ansible/facts.d/alb_ufw.fact
alb_lastrun_facts:
  alb_version: "{{ alb_version }}"
  alb_date_time: "{{ ansible_date_time.iso8601 }}"
  alb_manange:
    alb_manange_all: "{{ alb_manange_all | default(None) }}"
    alb_manange_haproxy: "{{ alb_manange_haproxy | default(None) }}"
    alb_manange_openresty: "{{ alb_manange_openresty | default(None) }}"
    alb_manange_common: "{{ alb_manange_common | default(None) }}"
    alb_manange_sanitycheck: "{{ alb_manange_sanitycheck | default(None) }}"
    alb_manange_apps: "{{ alb_manange_sanitycheck | default(None) }}"
    alb_manange_logrotate: "{{ alb_manange_sanitycheck | default(None) }}"

  # This result will be stored at /etc/ansible/facts.d/alb_ufw.fact
alb_ufw_facts:
  rules: "{{ alb_ufw_rules | default(None) }}"
  rules_always: "{{ alb_ufw_rules_always | default(None) }}"
  dmz: "{{ alb_dmz | default(None) }}"
  bastion_hosts: "{{ alb_bastion_hosts | default(None) }}"
  jump_boxes: "{{ alb_jump_boxes | default(None) }}"
  autoapply_dmz: "{{ alb_ufw_autoapply_dmz | default(None) }}"
  autoapply_bastion_hosts: "{{ alb_ufw_autoapply_bastion_hosts | default(None) }}"
  autoapply_jump_boxes: "{{ alb_ufw_autoapply_jump_boxes | default(None) }}"

## Internal, commom to all OSs
alb_internal_status_alb_apps: "sh /etc/ansible/facts.d/alb_apps.fact"
alb_internal_status_alb_haproxy: "sh /etc/ansible/facts.d/alb_haproxy.fact"
alb_internal_status_alb_openresty: "sh /etc/ansible/facts.d/alb_openresty.fact"
alb_internal_status_alb_sysapps: "sh /etc/ansible/facts.d/alb_sysappss.fact"
alb_internal_status_alb_ufw: "sh /etc/ansible/facts.d/alb_ufw.fact"

## very-early-abort-checks _____________________________________________________
# TODO: consider implement this instead of hardcoded
#       boostrap/very-early-abort-checks/main.yml (fititnt, 2019-12-13 15:59 BRT)

alb_internal_boostrap_very_early_abort_checks:
  - "test -f /usr/local/cpanel/version"

# TODO: how to implement one netstat equivalent on all platforms even when we
#       did not have netstat? This is and example netstat -tulpn | grep ':22'

## NGinx performance & size of node ____________________________________________
# @TODO: make it more user friendly to customize these variables (fititnt, 2020-01-05 09:19 BRT)

# NGinx server names -----------------------------------------------------------
# @see http://nginx.org/en/docs/http/server_names.html

# @see http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size
alb_internal_node_nginx_server_names_hash_bucket_size: 128 # Default: 32|64|128 (based processor’s cache line)

# @see http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size
alb_internal_node_nginx_server_names_hash_max_size: 512 # Default: 512

## Other/Temporary _____________________________________________________________
alb_manange_openresty_install: yes    # We require manange OpenResty, this is not optional
alb_manange_openresty_repository: yes # We require manange OpenResty, this is not optional

alb_boostrap_caninstallpython: yes