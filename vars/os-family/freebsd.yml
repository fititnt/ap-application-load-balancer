---
# FILE:            {{ role_path }}/vars/os-family/freebsd.yml
# LICENSE:         Public Domain
#
# DESCRIPTION:     This file is loaded by default for at least these OSs:
#                  It means it act as fall back for at least:
#                  'FreeBSD': ['FreeBSD', 'TrueOS'],

# BSD users: read https://docs.ansible.com/ansible/latest/user_guide/intro_bsd.html

# For me: https://www.cyberciti.biz/faq/how-to-prepare-freebsd-server-to-be-managed-by-ansible-tool/

alb_internal_root_user: 'root'
alb_internal_root_group: 'wheel'
alb_internal_package_manager_group: "pkgng"

# TODO: review this later
ansible_python_interpreter: "/usr/local/bin/python3"

alb_internal_bootstrap_basic_tools:
  - name: rsync
    state: present
#  - net-tools # FreeBSD 12 seems to already ship with netstat

alb_internal_bootstrap_extra_tools:
  - name: py36-pip
    state: present
  - name: py36-setuptools
    state: present
  # TODO: check if is really py36-pytest package
  - name: py36-pytest
    state: present
  - name: py36-passlib
    state: present
  - name: jq-1.6
    state: present
  - name: p5-Apache-Htpasswd
    state: present
  - name: nmap
    state: present

alb_internal_bootstrap_extra_tools_pip:
  - name: testinfra
    state: present

# TODO: check https://computingforgeeks.com/how-to-install-pip-python-package-manager-on-freebsd-12/
#       ln -s /usr/local/bin/pip-3.6 /usr/local/bin/pip
#       Ansible did not autodiscover the pip 'pip-3.6' package on FreeBSD

#alb_internal_bootstrap_luarocks_packages:
#  - name: luarocks
#    state: present

# OpenResty https://openresty.org/en/installation.html
# alb_internal_bootstrap_repositories_from_source:

## ALB/HAProxy _________________________________________________________________
alb_internal_haproxy_conf: "/etc/haproxy/haproxy.cfg" # "/usr/local/etc/haproxy.conf" whould be the default on FreeBSD
alb_internal_haproxy_conf_symlink: "/usr/local/etc/haproxy.conf"
alb_internal_haproxy_management: "bsd-init"

# alb_internal_haproxy_createhaproxyuser: yes # this option, if enabled, create haproxy user for you. Consider using for not running as root/wheel
alb_internal_haproxy_system_user: "{{ alb_haproxy_system_user | default('root') }}"
alb_internal_haproxy_system_group: "{{ alb_haproxy_system_group | default('wheel') }}"


alb_internal_haproxy_package:
  name: "haproxy"
  state: present

## ALB/OpenResty _______________________________________________________________
alb_internal_openresty_packages:
  - name: "openresty"
    state: present
  - name: "openresty-opm"
    state: present

## ALB/Status __________________________________________________________________
# @see https://superuser.com/questions/587912/what-is-the-bsd-equivalent-of-linux-netstat-lptun
# alb_internal_status_localports: "netstat -ntulp"
alb_internal_status_localports: "sockstat -4l"
alb_internal_status_diskspace: "df -h"

# BSD uses /usr/local/sbin/haproxy instead of /usr/sbin/haproxy
alb_internal_status_syntax_haproxy: "/usr/local/sbin/haproxy -c -V -f /etc/haproxy/haproxy.cfg"
alb_internal_status_syntax_openresty: "openresty -t"

alb_internal_status_availablepackages_haproxy: "pkg search haproxy"
alb_internal_status_availablepackages_openresty: "pkg search openresty"
alb_internal_status_availablepackages_python: "pkg search python"
alb_internal_status_availablepackages_lua: "pkg search lua*"
alb_internal_status_availablepackages_luarocks: "pkg search luarocks"

alb_internal_status_installedpackages_haproxy: "pkg info haproxy"
alb_internal_status_installedpackages_openresty: "pkg info openresty"
alb_internal_status_installedpackages_python: "pkg info python"
alb_internal_status_installedpackages_lua: "pkg info lua"
alb_internal_status_installedpackages_luarocks: "pkg info luarocks"

# @TODO: check where FreeBSD log things. maybe this helps
#        http://www.dctrwatson.com/2010/07/enable-logging-in-haproxy-on-freebsd/
#        https://www.mail-archive.com/haproxy@formilux.org/msg02544.html
#        (fititnt, 2019-12-11 09:41 BRT)

## ALB/Components not officially implemented ___________________________________

# Even if user enable, we will hardcode these options as false for FreeBSD at
# this moment. In short, means that as version v0.8.4, we will not enable
# tasks that require installation of OpenResty and UFW (fititnt, 2019-12-11 10:17 BRT)
alb_manange_openresty: false
alb_manange_sysapps: false
alb_manange_apps: false
alb_manange_ufw: false

alb_internal_alert_critical_ufw: >
  FreeBSD | Critical error! You are trying test native ALB/UFW FreeBSD-like
  operational systems. Please disable ALB/UFW on this node and implement
  alternatives

alb_internal_alert_critical_openresty: >
  FreeBSD | Critical error! You are test ALB/OpenResty on FreeBSD, but we
  do not implemented the compilation step as described here
  https://openresty.org/en/installation.html.

  This warning can be disabled at ap-application-load-balancer/vars/freebsd.yml

# Note: FreeBSD have logrotate https://www.freebsd.org/cgi/man.cgi?query=logrotate

alb_internal_alert_critical_haproxy: >
  FreeBSD | @TODO note to self, implement basic functionality with HAProxy (fititnt, 2019-12-08 00:22 BRT)

# https://docs.ansible.com/ansible/latest/modules/hostname_module.html
alb_internal_bootstrap_alb_standard_hostname_use: 'freebsd'