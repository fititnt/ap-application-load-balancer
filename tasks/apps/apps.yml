---

# FILE:            {{ role_path }}/tasks/apps.yml
# LICENSE:         Public Domain

# To force run this task file, you can use
#    ansible-playbook --tags="alb-apps" --extra-vars "alb_forceredeploy=yes" -i hosts my_playbook.yml
# To run only one app_use
#    ansible-playbook --tags="alb-apps" --extra-vars "alb_forceredeploy=yes only_app_uid=my_app_uid" -i hosts my_playbook.yml

- name: /etc/ansible/facts.d/alb_apps.fact
  template:
    src: files/alb_apps.fact
    dest: /etc/ansible/facts.d/alb_apps.fact
    mode: 0755
  register: alb_apps_facts_deployed

- name: "Apps | ALB App Rules"
  template:
    # src: "{{ item.vhost_template|default(alb_apps_serverblock_template) }}"
    src: "{{ alb_nginx_alb_stragies_folder }}/{{ item.app_alb_strategy }}.conf.j2"
    dest: "/opt/alb/apps/{{ item.app_uid }}.conf"
    owner: root
    group: "{{ alb_nginx_user }}"
    mode: 0644
    backup: yes
  with_items: "{{ alb_apps }}"
  vars:
    type_of_app: "app"
    basic_auth_enabled: "{{ item.app_auth_basic_enabled | default(alb_apps__app_auth_basic_enabled) }}"
    auth_basic: '"{{ item.app_auth_basic | default(alb_apps__app_auth_basic) }}"'
    auth_basic_user_file: '"{{ item.app_auth_basic_user_file | default(alb_apps__app_auth_basic_user_file) }}"'
  when:
    - item.app_alb_strategy is defined
    - alb_apps is defined and alb_apps[0] is defined
    - "(alb_run_only_app_uid is not defined) or (alb_run_only_app_uid == item.app_uid)"
    - "(alb_apps_facts_deployed is changed) or (alb_forceredeploy|bool)"
  notify: reload openresty

- name: "Apps | app_hook_after"
  include_tasks: "{{ item.app_hook_after }}"
  with_items: "{{ alb_apps }}"
  when:
    #- item.app_alb_strategy is defined
    - (item.app_hook_after is defined and item.app_hook_after)
    - alb_apps is defined and alb_apps[0] is defined
    - "(alb_run_only_app_uid is not defined) or (alb_run_only_app_uid == item.app_uid)"
    - "(alb_apps_facts_deployed is changed) or (alb_forceredeploy|bool)"

- name: Apps | mkdir /var/log/app/[app_uid]
  file:
    path: /var/log/app/{{ item.app_uid }}
    state: directory
    mode: '0644'
    owner: root
    group: "{{ alb_nginx_user }}"
  with_items: "{{ alb_apps }}"
  when:
    - alb_apps is defined and alb_apps[0] is defined
    - "(alb_run_only_app_uid is not defined) or (alb_run_only_app_uid == item.app_uid)"
    - "(alb_apps_facts_deployed is changed) or (alb_forceredeploy|bool)"

- name: Apps | mkdir /var/log/app/[app_uid]/access.log
  file:
    path: /var/log/app/{{ item.app_uid }}/access.log
    state: touch
    mode: '0644'
    owner: "{{ alb_nginx_user }}"
    group: "{{ alb_nginx_user }}"
  with_items: "{{ alb_apps }}"
  when:
    - alb_apps is defined and alb_apps[0] is defined
    - "(alb_run_only_app_uid is not defined) or (alb_run_only_app_uid == item.app_uid)"
    - "(alb_apps_facts_deployed is changed) or (alb_forceredeploy|bool)"

- name: Apps | mkdir /var/log/app/[app_uid]/error.log
  file:
    path: /var/log/app/{{ item.app_uid }}/error.log
    state: touch
    mode: '0644'
    owner: "{{ alb_nginx_user }}"
    group: "{{ alb_nginx_user }}"
  with_items: "{{ alb_apps }}"
  when:
    - alb_apps is defined and alb_apps[0] is defined
    - "(alb_run_only_app_uid is not defined) or (alb_run_only_app_uid == item.app_uid)"
    - "(alb_apps_facts_deployed is changed) or (alb_forceredeploy|bool)"
